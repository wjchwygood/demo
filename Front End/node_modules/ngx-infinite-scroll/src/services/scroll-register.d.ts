import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/sampleTime';
import { ElementRef } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { ContainerRef, IPositionStats } from '../models';
export interface IScrollRegisterConfig {
    container: ContainerRef;
    throttleDuration: number;
    mergeMap: Function;
    scrollHandler: (value: any) => void;
}
export interface IScroller {
    fromRoot: boolean;
    horizontal: boolean;
    disable: boolean;
    throttle: number;
    scrollWindow: boolean;
    element: ElementRef;
    scrollContainer: string | ElementRef;
    alwaysCallback: boolean;
    downDistance: number;
    upDistance: number;
    events?: {
        down: (ev) => any;
        up: (ev) => any;
    };
}
export declare function attachScrollEvent(options: IScrollRegisterConfig): Subscription;
export declare function createScroller(config: IScroller): Subscription;
export declare function handleOnScroll(scrollPosition: any, positionStats: IPositionStats, config: IScroller): void;
