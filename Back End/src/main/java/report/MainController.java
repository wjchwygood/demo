package report;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@CrossOrigin("*")
@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private RecordDao recordDao;

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Record> getAllUsers() {
		// This returns a JSON or XML with the use
		return recordDao.findAll();
	}

	@GetMapping(path="/find")
	public @ResponseBody Page<Record> find(
			@RequestParam(value="id", required=false) Integer id
			,@RequestParam(value="invoice_no", required=false) String invoiceNo
			,@RequestParam(value="stock_code", required=false) String stockCode
			,@RequestParam(value="description", required=false) String description
			,@RequestParam(value="quantity", required=false) Integer quantity
			,@RequestParam(value="from_date", required=false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fromDate
			,@RequestParam(value="to_date", required=false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime toDate
			,@RequestParam(value="min_price", required=false) Float minPrice
			,@RequestParam(value="max_price", required=false) Float maxPrice
			,@RequestParam(value="customer_id", required=false) Integer customerID
			,@RequestParam(value="country", required=false) String country
			,@RequestParam(value = "page", defaultValue = "0") Integer page
	        ,@RequestParam(value = "size", defaultValue = "15") Integer size) {
		// This returns a JSON or XML with the use
		Pageable pageable = new PageRequest(page, size);
		List<Record> list = recordDao.findByAll(
				id, 
				invoiceNo, 
				quantity, 
				stockCode, 
				description, 
				fromDate != null?new Date(Timestamp.valueOf(fromDate).getTime()):null, 
				toDate != null?new Date(Timestamp.valueOf(toDate).getTime()):null, 
				minPrice, 
				maxPrice, 
				customerID, 
				country,
				pageable
				);
		
		Long amount = recordDao.getAmountByAll(
				id, 
				invoiceNo, 
				quantity, 
				stockCode, 
				description, 
				fromDate != null?new Date(Timestamp.valueOf(fromDate).getTime()):null, 
				toDate != null?new Date(Timestamp.valueOf(toDate).getTime()):null, 
				minPrice, 
				maxPrice, 
				customerID, 
				country
				);
		
		return new PageImpl<Record>(list, pageable, amount);
	}
}
